packages:
  gimme_danger: !include common/gimme-danger.yaml
  wifi: !include common/wifi.yaml

fusb302:
  id: fusb302_id
  voltage: 5000 mV
  current: 1000 mA

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: True
      mode:
        input: true
        pullup: true
    name: Boot Button
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log:
            format: "Button PRESS"
            level: WARN

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Zurich

font:
  - file: "font/MatrixLight6.ttf"
    id: digit_font
    size: 6

globals:
  - id: angle
    type: float
    restore_value: yes
    initial_value: "90"

light:
  - platform: fastled_clockless
    id: lights
    chipset: WS2812B
    pin: GPIO9
    num_leds: 512 # 2 x 32x8 matrix
    rgb_order: GRB
    internal: true
    # Set max brightness to 65%.
    color_correct: [65%, 65%, 65%]
    default_transition_length: 10ms

# https://esphome.io/components/display/addressable_light#btf-lighting-8x32-ws2812b-flexible-led-matrix
display:
  - platform: addressable_light
    id: matrix_lamp
    addressable_light_id: lights
    width: 32
    height: 16
    pixel_mapper: |-
      int iMatrixOffset = y >= 8 ? 256 : 0;
      if (x % 2 == 0) {
        return (x * 8) + (y % 8) + iMatrixOffset;
      }
      return (x * 8) + iMatrixOffset + (7 - (y % 8));
    update_interval: 500ms
    lambda: |-
      Color amber = Color(0xDF8634);

      int cols = 32 * (id(angle) / 360.0f);
      // Fill rect from (0, 0) to (cols, 16) with amber.
      it.filled_rectangle(0, 0, cols / 2, 16, amber);
      it.filled_rectangle(32-cols / 2, 0, cols / 2, 16, amber);

      // Get hour.
      int hour = id(sntp_time).now().hour;
      // Get minute.
      int minute = id(sntp_time).now().minute;

      it.printf(32 / 2 - 4, 1, id(digit_font), amber, "%02d", hour);
      it.printf(32 / 2 - 4, 9, id(digit_font), amber, "%02d", minute);

number:
  - platform: template
    id: angle_selector
    name: "Angle Selector"
    min_value: 0
    max_value: 360
    step: 10
    initial_value: 90
    optimistic: true
    on_value:
      then:
        - lambda: |-
            // Update the angle global variable
            id(angle) = id(angle_selector).state;
        - logger.log:
            format: "Angle Selector changed to %.0f"
            args: [id(angle_selector).state]
            level: INFO
        - component.update: matrix_lamp

switch:
  - platform: gpio
    pin: GPIO12
    id: load_switch
    name: Matrix Lamp Switch
    icon: mdi:flash
    on_turn_on:
      then:
        - delay: 1000ms
        - lambda: |-
            ESP_LOGW("load_switch", "Load switch turned ON");
            id(matrix_lamp).set_enabled(true);
    on_turn_off:
      then:
        - delay: 1000ms
        - lambda: |-
            ESP_LOGW("load_switch", "Load switch turned OFF");
            id(matrix_lamp).set_enabled(false);
